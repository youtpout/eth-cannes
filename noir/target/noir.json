{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"14303884230869443534","abi":{"parameters":[{"name":"lat","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"long","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5033917411977450804":{"error_kind":"string","string":"You are too far from Palais des congr√®s"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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99x0z0333LTPTfvctM+tNVdyu8ntJreb3G5yu8ntJreb3G5yu8ntLre73O5yu8vtLre73O5yu8vtLre73O5yu/PsdjkPb5fz9HY5j2+Xy+0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+0ut7v2uWufu/a5a5+79rlrn7v2uWufu/a5y+0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+2ue+6656577rrnrnvu2ueufe7a556aK7nd5XaX211ud7nd5XaX211ud7nd5XaX211ud7nd5XaX211ud7nd5XaX211ud7ndW3PVmqvWXLXmSm53ud3ldpfbXW53ud3ldpfbXW53ud3l9pDbQ24PuT20z0P7PLTPQ/s8tM9D+zy0z0P7PLTPQ24PuT3k9pDbQ24PuT3k9pDbQ24PuT3k9pDbQ24PuT3k9pDbQ24P3fPQPQ/d89A9D93z0D4P7fPQPg99Hy7k9pDbQ24PuT3k9pDbQ24PuT3k9pDbQ24PuT3k9pDbQ24PuT3k9pDbQ24PuT3k9gjNVWquUnOVmiu5PeT2kNtDbg+5PeT2kNtDbg+5PeT2kNtDbg+5PeT20D4P7fPQPg/t89A+D+3z0D4P7fPQPg+5PeT2kNtDbg+5PeT2kNtDbg+5PeT2kNtDbg+5PeT2lNtTbk+5PXXPU/c8dc9T9zx1z1P7PLXPU/s89X24lNtTbk+5PeX2lNtTbk+5PeX2lNtTbk+5PeX2lNtTbk+5PeX2lNtTbk+5PeX2lNuTJ9MreTS9kmfTK3k4vVJuT7k95faU21NuT7k95faU21NuT7k95faU21NuT7n9/MxWv6pnj3lVpspVhapUVapa1VC97vn8+fzF4q+fPvzw+eOv77754/n7w79/+ZFfFn7842///wv/hv/kyC9ff/7x40+/f/34/MXiX/XfHXn8qb71eh/13fvXLw1/+7gp7x+fue/+fP4q8j8A","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"// Palais des festivals Cannes Latitude : 43,5513755 Longitude : 7,017384 43.5513755 7.017384\n\nfn main(lat: i64, long: i64) {\n    // coord x 1_000_000\n    let latCannes: i64 = 43_551_375;\n    let longCannes: i64 = 7_017_384;\n\n    let delta_lat = lat - latCannes; // in milli-degrees\n    let delta_lon = long - longCannes;\n\n    // 1 microdegree around 0.11132 meters\n    // To keep integers: multiply delta by 11132 and divide by 100000 (i.e. 0.11132 = 11132/100000)\n    let dy = (delta_lat * 11132) / 100000;\n    let dx = (delta_lon * 11132) / 100000;\n\n    // Compute squared distance\n    let square_distance = dx * dx + dy * dy;\n\n    // Return approximate square root (distance in meters)\n    // Noir has no built-in sqrt, so we use an integer approximation\n    let dist: i64 = sqrt_approx(square_distance);\n\n    println(f\"distance: {dist} m\");\n\n    // due to calculation precision and gps phone precision, we use 500m as max distance\n    assert(dist < 500, \"You are too far from Palais des congr√®s\");\n}\n\n/// Approximate square root using Newton's method (on i64)\nfn sqrt_approx(x: i64) -> i64 {\n    let mut guess = x / 2;\n    for i in 0..20 {\n        guess = (guess + x / guess) / 2;\n    }\n    guess\n}\n\n#[test]\nfn test_main() {\n    main(43_549_755, 7_018_199);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n\n#[test(should_fail_with = \"You are too far from Palais des congr√®s\")]\nfn test_fail_distance() {\n    main(42_549_755, 6_018_199);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/eddy/Projects/eth-cannes/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient","directive_invert"]}