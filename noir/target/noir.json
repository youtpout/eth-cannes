{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"16087514529589735135","abi":{"parameters":[{"name":"lat","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"long","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"address","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5033917411977450804":{"error_kind":"string","string":"You are too far from Palais des congr√®s"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"16427980848386987707":{"error_kind":"string","string":"Invalid address"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"tdzdjlzF1cbxe/GxD3bV+uZWEEIGnMiSZZCBV3qFuPd0d+3/k+QAKZooJ1OLkH6WNb1q1s+zZ/jj3U8ff/j9799/+vK3n3999823f7z74eunz58//f37zz//+OG3Tz9/efyvf7y7nh/y8XG9f5frHPscdg4/R5wjz1Hn6HPM66iTUielTkqdlDopdVLqpNRJqZNSJ6VPSp+UPil9Uvqk9Enpk9InpU9Kn5Q5KXNS5qTMSZmTMidlTsqclDkpc1LWdd3nus99n3affp9xn3mfdZ99n3feuvPWnbfuvHXnrTtv3Xnrzlt33rrz1p2377x95+07b995+87bd96+8/adt++8fefZnWd3nt15dufZnWd3nt15dufZnWd3nt95fuf5ned3nt95fuf5ned3nt95fufFnRd3Xtx58cjbz9PvM+7zkbf//PP9O2b++9++fvz4HPl/uQSPq/HLh68fv/z27psvv3/+/P7d/334/Pvr//TrLx++vM7fPnx9/Nvr/buPX356nI/Av336/PFZ/fn+n6++/vqlPet+8WzTy/f+T19fXvfrq683vH77vl+/o/T6+I///Hvmfr2tfMPrvfJ+vY+96fVxvz6ut7w+Fn/+sHzT65vX+1tenxfvXy5/y+uXXr/9v+v/pteXPv/915//tf864PGljOvzKONNEXsZEfsx+m+KuOK/j/B/RrzlLvXiM9F+/eUfof53X0zG+TxOvOUyPdYhX00eG/Hfx+m7xz99+PHT139XxuPL9KOlvT7662O8PubrY70+9uvjvD4+9+TzWOc4L1/n9esErJOwTsQ6GeuEPNfj4016bsfnsc6xz2Hn8HPEOfIcdY4+x0mxk2InxU6KnRQ7KXZSntvwMV7PZfg8+hzzOp6b8Hmsc+xz2Dn8HHGOR8rji+VzBT6PPse8juf+ex7rHPscdg4/R5zjpMRJiZMSJyVPSp6UPCl5UvKk5El5cq8O9+pwrw736nCvDvfqcK8O9+pwrw736nCvD/f6cK8P9/pwrw/3+nCvD/f6cK8P9/pwrw/3+nCvD/f6cK8P9/pwrw/3+nCvD/f6cG8O9+Zwbw735ube3Nybm3tzc29u7s3Nvbm5Nzf35ube3Nybm3tzc2/g3oX3LsB3Ib4L8l2Y7wJ9F+q7YN+F+y7gdyG/C/pd2O8Cfxf6u+Cf/CcASoAioAwoBEqBYqAcKAhKgqKgLCgMSoPioDwoEEqEIqFMKBRKhWIhLlx2w/AUQZEURdEUcxevvxe9ikWxKUhOkpPkJDlJTpKT5CL59bclfxabwiicIiiSoiiaYu7i9fenV0Fyk9wkN8lNcpPcJDfJTfKQPCQPyUPykDwkD8lD8pA8d/K+LopF8UyOZ2EUThEUSVEUTTF38foL16tYFCQvkhfJi+RF8iJ5kbxI3iRvkjfJm+RN8iZ5k/y6g/ksmmLu4nUHX8Wi2BRG4RRBkRQkG8lGspPsJDvJTrKT7Pc7uD0piqIpeAeDdzB4B2NTGIVTkBwkB8lBcpCcJCfJSXKSnCQnyUlykpwkJ8lFMndwcwc3d3BzBzd3cBfvYDEbxWwUs9HMRjMbzWw0s9HMRjMbTXKT3CQ3yUPykDwkD8lD8pA8JA/JQ/LcyXZdFPds2LUpjMIpgiIpiqIp7qmzdVGQvEheJC+SF8mL5EXyInnd76Dti2JRbAqjcIqgSIqiaAqSjWQj2Ug2ko1kI9lINpKNZCPZSXaSnWQn2UnmDhp30LiDxh007qAF72Asik1hFE4RFElRFE3BbCTJSXKSnCQnyUlykpwkJ8lJcpFcJBfJRXKRXMxGMRvFbBSzUUxdM3XN1DVT10xdM3VNcpPcJDfJTfKQPCQPyexBYw8ae9DYg8YeNPagsQedPejsQb82hVE4RVAkRVE0BcmL5EXyInmRvEheJC+SF8mLZO6gcwedO+jcQecOOnvQ2YPOHvRdFE1xz4bbRbEoNoVRkGwkG8lGspFsJDvJTrKT7CQ7yU6yk+wkO8l+z4bHRbEoNoVROEVQJEVRNAXJSXKSnCQnyUlykpwkswedPejsQWcPOnvQ2YPOHnT2oLMHHYs6FnUs6ljUsahjUceijkUdizoWdSzqWNSxqGNRx6KORR2LOnfQuYPOHXTuoHMHnT3o7MFgD8a1KDaFUThFUCRFUTQFyVg0sGhg0cCigUUDiwYWDSwaWDSwaGDRwKKBRWPfsxHbKYIiKYqiKe6pCywaWDSwaGDRwKKBRQOLBhYNLBpYNLBosAeDPRjswWAPBnsw2IPBHgz2YLAHA4sGFg0sGlg0sGhg0cCigUUDiwYWDSwaWDSwaGDRwKKBRQOLBncwuIPBHQzuYHAHgz0Y7MFgD0YxG1g0sGhg0cCigUUDiwYWDSwaWDSwaGDRwKKBRQOLBhYNLBpYNLBoYNHAooFFY5iNYTbmno28LopFsSmMwimCIimKoilIxqKJRROLJhZNLJrswWQPJnsw2YPJHkz2YLIHkz2Y7MHEoolFE4smFk0smlg0sWhi0cSiiUUTiyYWTSyaWDSxaGLRxKLJHUzuYHIHkzuY3MFkDyZ7MNmD6fdsJBZNLJpYNLFoYtHEoolFE4smFk0smlg0sWhi0cSiiUUTiyYWTSyaWDSxaGLRLGajmI1iNorZwKKJRROLJhZNLJpYNLFoYtHEoolFE4smFk0smlg02YPJHkz2YLIHkz2Y7MFkDyZ7MNmDiUUTixYWLSxaWLSwaGHRwqKFRQuLFhYtLFpYtLBoYdHCooVFiztY3MHiDhZ3sLiDxR4s9mCxB4vvyRQWLSxaWLSwaGHRwqKFRQuLFhYtLFpYtLBoYdHCooVFC4sWFi0sWli0sGhh0fJ7NsqToiia4p66wqKFRQuLFhYtLFpYtLBoYdHCooVFC4sWFi0sWuzBYg8We7DYg8UeLPZgsQeLPVjswcKihUULixYWLSxaWLSwaGHRwqKFRQuLFhYtLFpYtLBoYdHCosUdLO5gcQeLO1jcwWIPFnuw2IPF92QKixYWbSzaWLSxaGPRxqKNRRuLNhZtLNpYtLFoY9HGoo1FG4s2Fm0s2li0sWivezZ6XxSLYlMYhVMERVIURVOQjEUbizYWbSzaWLSxaGPRZg82e7DZg80ebPZgswebPdjswWYPNhZtLNpYtLFoY9HGoo1FG4s2Fm0s2li0sWhj0caijUUbizYWbe5gcwebO9jcweYONnuw2YPNHmy+J9NYtLFoY9HGoo1FG4s2Fm0s2li0sWhj0caijUUbizYWbSzaWLSxaGPRxqKNRXuYjWE2htkYZgOLNhZtLDpYdLDoYNHBooNFB4sOFh0sOlh0sOhg0WEPDntw2IPDHhz24LAHhz047MFhDw4WHSw6WHSw6GDRwaKDRQeLDhYdLDpYdLDoYNHBooNFB4sOFh3u4HAHhzs43MHhDg57cNiDwx4cviczWHSw6GDRwaKDRQeLDhYdLDpYdLDoYNHBooNFB4sOFh0sOlh0sOhg0cGig0UnmY1kNpLZKGYDiw4WHSw6WHSw6GDRwaKDRQeLDhYdLDpYdLDoYNFhDw57cNiDwx4c9uCwB4c9OOzBYQ8OFh0sOlh0sOhg0cGij+fyl6qlaqsyVa4qVKWqUtWq1GOpx1KPpR5LPZZ6LPVgMT6qUtWqhgqgPqqlaqsyVa4qVKnHVo+tHls9TD1MPUw9TD1MPUw9TD1MPUw9TD1cPXiS+Ki2KlPlqkJVqipVrWqo4OujUo9Qj1CPUI9Qj1CPUI9Qj9B7nnrPU+956j1Pveep9zz1nqfmKjVXqblK9Sj10LP+Sw/7Lz3tv/S4/9Lz/ksP/C898b/0yP/SM/9LD/0vPfW/9Nj/0nP/Sw/+Lz35v/To/9Kz/0sP/y89/b9G7/lorkZzNZqr0VyN5mo0V6O5Gs0V3l0L8K6FeNeCvGth3rVA71qody3YuxbuXQv4rnWpx1KPpR5LPZZ6LPXgmeRaPJRci6eSa/FYci0MvBYIXgsFrwWD18LBawHhtbZ6bPXY6rHVY6uHqYeph6kH23gt1vFa7OO1WMhrsZHXYiWvxU5ei6W8Flt5LWi8lquHq4erh6uHq4erh6tHqEeoR6hHqEeoR6hHqEeoR6iH7vnSPV+650v3fOmer9R7npqr1Fyl5io1V6m5Ks1Vaa5Kc1Waq1KPUo9Sj1KPUo9Sj1aPVo9Wj1aPVo9Wj1aPVo9Wj9ZcjeZqNFejuRrN7mh2R7M7mt3R7I5mF1OvDarXRtVrw+q1cfXawHptZL02tF5b+3xrn2/t8619vrXPt/b51j7f2udb+3yD7LWXeiz1WOqx1WOrx1aPrR5bPbZ6bPXY6rHVY6uHqYeph6mH7vnWPd+651v3fOueb+3zrX2+tc8334VaG36vjb/XBuBrI/C1IfjaGHxtVw9Xj1CPUI9Qj1CPUI9Qj1CPUI9Qj1CPVI9Uj1SP1Fyl5io1V6m5wuVrA/O1U7Nbmt3S7JZmt9Sj1KPUo9Sj1KPUo9Sj1UP7fGufb+3zrX2+tc+39vnWPt/a51v7fOvH+bZ+nm/rB/q2fqJv60f6tn6mb+uH+rZ+qm/rx/q23G5yu8ntJreb3G5yu8ntJreb7rnpnpvuuemem+65aZ+b9rlpnxvfz1omt5vcbnK7ye0mt5vcbnK7ye0mt5vcbnK7ye0mt5vcbnK7ye0mt5vcbnK7ye0mtxtPXJfxyHUZz1yX8dB1mdxucrvJ7Sa3m9xucrvJ7Sa3m9xucrvJ7Sa3m9xucrtpn5v2uWmfm/a5aZ+b9rlpn5v2uWmfm9xucrvJ7Sa3m9xucrvJ7Sa3m9xucrvJ7Sa3m9xucrvJ7Sa3m9xuuueme26656Z7brrnpn1u2uemfW6tuZLbTW43ud3kdpPbTW43ud3kdpPbTW53ud3ldpfbXW53ud3ldpfbXW53ud3ldpfbnWe3y3l4u5ynt8t5fLtcbne53eV2l9tdbne53eV2l9tdbne53eV2l9tdbne53bXPXfvctc9d+9y1z1373LXPXfvctc9dbne53eV2l9tdbne53eV2l9tdbne53eV2l9tdbne53eV2l9tdbnfdc9c9d91z1z133XPXPnftc9c+99Rcye0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+0ut7vc7nK7y+3emqvWXLXmqjVXcrvL7S63u9zucrvL7S63u9zucrvL7S63h9wecnvI7aF9HtrnoX0e2uehfR7a56F9HtrnoX0ecnvI7SG3h9wecnvI7SG3h9wecnvI7SG3h9wecnvI7SG3h9wecnvonofueeieh+556J6H9nlon4f2eej7cCG3h9wecnvI7SG3h9wecnvI7SG3h9wecnvI7SG3h9wecnvI7SG3h9wecnvI7SG3R2iuUnOVmqvUXMntIbeH3B5ye8jtIbeH3B5ye8jtIbeH3B5ye8jtIbeH9nlon4f2eWifh/Z5aJ+H9nlon4f2ecjtIbeH3B5ye8jtIbeH3B5ye8jtIbeH3B5ye8jtIben3J5ye8rtqXueuuepe56656l7ntrnqX2e2uep78Ol3J5ye8rtKben3J5ye8rtKben3J5ye8rtKben3J5ye8rtKben3J5ye8rtKben3J48mV7Jo+mVPJteycPplXJ7yu0pt6fcnnJ7yu0pt6fcnnJ7yu0pt6fcnnJ7yu3nZ7b6VT17zKsyVa4qVKWqUtWqhup1z0/16LGvV7Wf1Z/PXzf++unDD58//vrumz+ev1P8+5cf+QXixz/+9v+/8G/4D5n88vXnHz/+9PvXj89fNv5V/zWTx5/0W6/3Ud+9f/0i8beP2/P+8dn87s/nryf/Aw==","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"// Palais des festivals Cannes Latitude : 43,5513755 Longitude : 7,017384\n\nfn main(lat: i64, long: i64, address: Field) {\n    // coord x 1_000_000\n    let latCannes: i64 = 43_551_375;\n    let longCannes: i64 = 7_017_384;\n\n    let delta_lat = lat - latCannes; // in milli-degrees\n    let delta_lon = long - longCannes;\n\n    // 1 microdegree around 0.11132 meters\n    // To keep integers: multiply delta by 11132 and divide by 100000 (i.e. 0.11132 = 11132/100000)\n    let dy = (delta_lat * 11132) / 100000;\n    let dx = (delta_lon * 11132) / 100000;\n\n    // Compute squared distance\n    let square_distance = dx * dx + dy * dy;\n\n    // Return approximate square root (distance in meters)\n    // Noir has no built-in sqrt, so we use an integer approximation\n    let dist: i64 = sqrt_approx(square_distance);\n\n    println(f\"distance: {dist} m\");\n\n    // due to calculation precision and gps phone precision, we use 500m as max distance\n    assert(dist < 500, \"You are too far from Palais des congr√®s\");\n\n    assert(address != 0, \"Invalid address\");\n}\n\n/// Approximate square root using Newton's method (on i64)\nfn sqrt_approx(x: i64) -> i64 {\n    let mut guess = x / 2;\n    for i in 0..20 {\n        guess = (guess + x / guess) / 2;\n    }\n    guess\n}\n\n#[test]\nfn test_main() {\n    main(43_549_755, 7_018_199, 0x3);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n\n#[test(should_fail_with = \"You are too far from Palais des congr√®s\")]\nfn test_fail_distance() {\n    main(42_549_755, 6_018_199, 0x3);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n\n#[test(should_fail_with = \"Invalid address\")]\nfn test_fail_address() {\n    main(43_549_755, 7_018_199, 0);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/eddy/Projects/eth-cannes/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient","directive_invert"]}